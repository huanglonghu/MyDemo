package com.xx.yuefang.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xx.yuefang.database.entity.UserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_BEAN".
*/
public class UserBeanDao extends AbstractDao<UserBean, Long> {

    public static final String TABLENAME = "USER_BEAN";

    /**
     * Properties of entity UserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PhoneNumber = new Property(1, String.class, "PhoneNumber", false, "PHONE_NUMBER");
        public final static Property NickName = new Property(2, String.class, "NickName", false, "NICK_NAME");
        public final static Property Avatar = new Property(3, String.class, "Avatar", false, "AVATAR");
        public final static Property Credit = new Property(4, int.class, "Credit", false, "CREDIT");
        public final static Property Score = new Property(5, double.class, "Score", false, "SCORE");
        public final static Property UserType = new Property(6, int.class, "userType", false, "USER_TYPE");
        public final static Property CommanyName = new Property(7, String.class, "CommanyName", false, "COMMANY_NAME");
        public final static Property RoleId = new Property(8, int.class, "RoleId", false, "ROLE_ID");
        public final static Property RoleName = new Property(9, String.class, "RoleName", false, "ROLE_NAME");
        public final static Property Introduce = new Property(10, String.class, "Introduce", false, "INTRODUCE");
        public final static Property BusinessCardName = new Property(11, String.class, "BusinessCardName", false, "BUSINESS_CARD_NAME");
        public final static Property Email = new Property(12, String.class, "Email", false, "EMAIL");
        public final static Property Address = new Property(13, String.class, "Address", false, "ADDRESS");
        public final static Property Sex = new Property(14, String.class, "sex", false, "SEX");
        public final static Property ReservationDays = new Property(15, int.class, "reservationDays", false, "RESERVATION_DAYS");
        public final static Property DeveloperId = new Property(16, int.class, "developerId", false, "DEVELOPER_ID");
        public final static Property Token = new Property(17, String.class, "token", false, "TOKEN");
        public final static Property IsbindQQ = new Property(18, boolean.class, "IsbindQQ", false, "ISBIND_QQ");
        public final static Property IsbindWeChat = new Property(19, boolean.class, "IsbindWeChat", false, "ISBIND_WE_CHAT");
        public final static Property IsbindFacebook = new Property(20, boolean.class, "IsbindFacebook", false, "ISBIND_FACEBOOK");
        public final static Property Profile = new Property(21, String.class, "Profile", false, "PROFILE");
        public final static Property CompanyId = new Property(22, int.class, "CompanyId", false, "COMPANY_ID");
        public final static Property IDCardPositive = new Property(23, String.class, "IDCardPositive", false, "IDCARD_POSITIVE");
        public final static Property IDCardReverseSide = new Property(24, String.class, "IDCardReverseSide", false, "IDCARD_REVERSE_SIDE");
        public final static Property BusinessLicense = new Property(25, String.class, "BusinessLicense", false, "BUSINESS_LICENSE");
        public final static Property Telephone = new Property(26, String.class, "Telephone", false, "TELEPHONE");
    }


    public UserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PHONE_NUMBER\" TEXT," + // 1: PhoneNumber
                "\"NICK_NAME\" TEXT," + // 2: NickName
                "\"AVATAR\" TEXT," + // 3: Avatar
                "\"CREDIT\" INTEGER NOT NULL ," + // 4: Credit
                "\"SCORE\" REAL NOT NULL ," + // 5: Score
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 6: userType
                "\"COMMANY_NAME\" TEXT," + // 7: CommanyName
                "\"ROLE_ID\" INTEGER NOT NULL ," + // 8: RoleId
                "\"ROLE_NAME\" TEXT," + // 9: RoleName
                "\"INTRODUCE\" TEXT," + // 10: Introduce
                "\"BUSINESS_CARD_NAME\" TEXT," + // 11: BusinessCardName
                "\"EMAIL\" TEXT," + // 12: Email
                "\"ADDRESS\" TEXT," + // 13: Address
                "\"SEX\" TEXT," + // 14: sex
                "\"RESERVATION_DAYS\" INTEGER NOT NULL ," + // 15: reservationDays
                "\"DEVELOPER_ID\" INTEGER NOT NULL ," + // 16: developerId
                "\"TOKEN\" TEXT," + // 17: token
                "\"ISBIND_QQ\" INTEGER NOT NULL ," + // 18: IsbindQQ
                "\"ISBIND_WE_CHAT\" INTEGER NOT NULL ," + // 19: IsbindWeChat
                "\"ISBIND_FACEBOOK\" INTEGER NOT NULL ," + // 20: IsbindFacebook
                "\"PROFILE\" TEXT," + // 21: Profile
                "\"COMPANY_ID\" INTEGER NOT NULL ," + // 22: CompanyId
                "\"IDCARD_POSITIVE\" TEXT," + // 23: IDCardPositive
                "\"IDCARD_REVERSE_SIDE\" TEXT," + // 24: IDCardReverseSide
                "\"BUSINESS_LICENSE\" TEXT," + // 25: BusinessLicense
                "\"TELEPHONE\" TEXT);"); // 26: Telephone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PhoneNumber = entity.getPhoneNumber();
        if (PhoneNumber != null) {
            stmt.bindString(2, PhoneNumber);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(3, NickName);
        }
 
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(4, Avatar);
        }
        stmt.bindLong(5, entity.getCredit());
        stmt.bindDouble(6, entity.getScore());
        stmt.bindLong(7, entity.getUserType());
 
        String CommanyName = entity.getCommanyName();
        if (CommanyName != null) {
            stmt.bindString(8, CommanyName);
        }
        stmt.bindLong(9, entity.getRoleId());
 
        String RoleName = entity.getRoleName();
        if (RoleName != null) {
            stmt.bindString(10, RoleName);
        }
 
        String Introduce = entity.getIntroduce();
        if (Introduce != null) {
            stmt.bindString(11, Introduce);
        }
 
        String BusinessCardName = entity.getBusinessCardName();
        if (BusinessCardName != null) {
            stmt.bindString(12, BusinessCardName);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(13, Email);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(14, Address);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(15, sex);
        }
        stmt.bindLong(16, entity.getReservationDays());
        stmt.bindLong(17, entity.getDeveloperId());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(18, token);
        }
        stmt.bindLong(19, entity.getIsbindQQ() ? 1L: 0L);
        stmt.bindLong(20, entity.getIsbindWeChat() ? 1L: 0L);
        stmt.bindLong(21, entity.getIsbindFacebook() ? 1L: 0L);
 
        String Profile = entity.getProfile();
        if (Profile != null) {
            stmt.bindString(22, Profile);
        }
        stmt.bindLong(23, entity.getCompanyId());
 
        String IDCardPositive = entity.getIDCardPositive();
        if (IDCardPositive != null) {
            stmt.bindString(24, IDCardPositive);
        }
 
        String IDCardReverseSide = entity.getIDCardReverseSide();
        if (IDCardReverseSide != null) {
            stmt.bindString(25, IDCardReverseSide);
        }
 
        String BusinessLicense = entity.getBusinessLicense();
        if (BusinessLicense != null) {
            stmt.bindString(26, BusinessLicense);
        }
 
        String Telephone = entity.getTelephone();
        if (Telephone != null) {
            stmt.bindString(27, Telephone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String PhoneNumber = entity.getPhoneNumber();
        if (PhoneNumber != null) {
            stmt.bindString(2, PhoneNumber);
        }
 
        String NickName = entity.getNickName();
        if (NickName != null) {
            stmt.bindString(3, NickName);
        }
 
        String Avatar = entity.getAvatar();
        if (Avatar != null) {
            stmt.bindString(4, Avatar);
        }
        stmt.bindLong(5, entity.getCredit());
        stmt.bindDouble(6, entity.getScore());
        stmt.bindLong(7, entity.getUserType());
 
        String CommanyName = entity.getCommanyName();
        if (CommanyName != null) {
            stmt.bindString(8, CommanyName);
        }
        stmt.bindLong(9, entity.getRoleId());
 
        String RoleName = entity.getRoleName();
        if (RoleName != null) {
            stmt.bindString(10, RoleName);
        }
 
        String Introduce = entity.getIntroduce();
        if (Introduce != null) {
            stmt.bindString(11, Introduce);
        }
 
        String BusinessCardName = entity.getBusinessCardName();
        if (BusinessCardName != null) {
            stmt.bindString(12, BusinessCardName);
        }
 
        String Email = entity.getEmail();
        if (Email != null) {
            stmt.bindString(13, Email);
        }
 
        String Address = entity.getAddress();
        if (Address != null) {
            stmt.bindString(14, Address);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(15, sex);
        }
        stmt.bindLong(16, entity.getReservationDays());
        stmt.bindLong(17, entity.getDeveloperId());
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(18, token);
        }
        stmt.bindLong(19, entity.getIsbindQQ() ? 1L: 0L);
        stmt.bindLong(20, entity.getIsbindWeChat() ? 1L: 0L);
        stmt.bindLong(21, entity.getIsbindFacebook() ? 1L: 0L);
 
        String Profile = entity.getProfile();
        if (Profile != null) {
            stmt.bindString(22, Profile);
        }
        stmt.bindLong(23, entity.getCompanyId());
 
        String IDCardPositive = entity.getIDCardPositive();
        if (IDCardPositive != null) {
            stmt.bindString(24, IDCardPositive);
        }
 
        String IDCardReverseSide = entity.getIDCardReverseSide();
        if (IDCardReverseSide != null) {
            stmt.bindString(25, IDCardReverseSide);
        }
 
        String BusinessLicense = entity.getBusinessLicense();
        if (BusinessLicense != null) {
            stmt.bindString(26, BusinessLicense);
        }
 
        String Telephone = entity.getTelephone();
        if (Telephone != null) {
            stmt.bindString(27, Telephone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserBean readEntity(Cursor cursor, int offset) {
        UserBean entity = new UserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PhoneNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // NickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Avatar
            cursor.getInt(offset + 4), // Credit
            cursor.getDouble(offset + 5), // Score
            cursor.getInt(offset + 6), // userType
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CommanyName
            cursor.getInt(offset + 8), // RoleId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // RoleName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Introduce
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BusinessCardName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Email
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // Address
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sex
            cursor.getInt(offset + 15), // reservationDays
            cursor.getInt(offset + 16), // developerId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // token
            cursor.getShort(offset + 18) != 0, // IsbindQQ
            cursor.getShort(offset + 19) != 0, // IsbindWeChat
            cursor.getShort(offset + 20) != 0, // IsbindFacebook
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Profile
            cursor.getInt(offset + 22), // CompanyId
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // IDCardPositive
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // IDCardReverseSide
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // BusinessLicense
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // Telephone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPhoneNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAvatar(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCredit(cursor.getInt(offset + 4));
        entity.setScore(cursor.getDouble(offset + 5));
        entity.setUserType(cursor.getInt(offset + 6));
        entity.setCommanyName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRoleId(cursor.getInt(offset + 8));
        entity.setRoleName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIntroduce(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBusinessCardName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddress(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSex(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReservationDays(cursor.getInt(offset + 15));
        entity.setDeveloperId(cursor.getInt(offset + 16));
        entity.setToken(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsbindQQ(cursor.getShort(offset + 18) != 0);
        entity.setIsbindWeChat(cursor.getShort(offset + 19) != 0);
        entity.setIsbindFacebook(cursor.getShort(offset + 20) != 0);
        entity.setProfile(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCompanyId(cursor.getInt(offset + 22));
        entity.setIDCardPositive(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIDCardReverseSide(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setBusinessLicense(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTelephone(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
